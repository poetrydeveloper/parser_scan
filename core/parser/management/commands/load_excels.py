import os
import re
from datetime import datetime
from django.core.management.base import BaseCommand
from openpyxl import load_workbook
from django.core.files import File
from django.db import transaction  # üëà –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
from termcolor import cprint

from parser.models import ExcelFile, Product, Invoice

INPUT_DIR = 'parser/input'
FILENAME_PATTERN = re.compile(
    r'^(?P<number>\d+?)_(?P<date>\d{2}-\d{2}-\d{4})_(?P<page>\d+)\.xlsx$'
)


# --- –¢–≤–æ–∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def validate_header_row(row):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫"""
    expected_headers = ['1', '2', '3', '4']
    return all(str(cell).strip() == expected_headers[i] for i, cell in enumerate(row[:4]) if cell)


def strict_float_conversion(value, row_index, field_name):
    """–°—Ç—Ä–æ–≥–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ float —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    if value is None:
        raise ValueError(f"–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ {field_name} (—Å—Ç—Ä–æ–∫–∞ {row_index})")

    original_value = str(value).strip()
    if not original_value:
        raise ValueError(f"–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ {field_name} (—Å—Ç—Ä–æ–∫–∞ {row_index})")

    try:
        # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è: –∑–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        cleaned_value = original_value.replace(',', '.').replace(' ', '')
        return float(cleaned_value)
    except ValueError:
        raise ValueError(
            f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{original_value}' –≤ —á–∏—Å–ª–æ "
            f"(—Å—Ç—Ä–æ–∫–∞ {row_index}, –ø–æ–ª–µ {field_name})"
        )


# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∫–æ–º–∞–Ω–¥—ã —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ ---
class Command(BaseCommand):
    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç Excel-—Ñ–∞–π–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ bulk_create"

    def handle(self, *args, **kwargs):
        # ... (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ)
        if not os.path.exists(INPUT_DIR):
            os.makedirs(INPUT_DIR, exist_ok=True)
            cprint(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {INPUT_DIR}", 'yellow')

        files = [f for f in os.listdir(INPUT_DIR) if f.endswith('.xlsx')]
        if not files:
            cprint("–ù–µ—Ç .xlsx —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ input", 'yellow')
            return

        for filename in files:
            filepath = os.path.join(INPUT_DIR, filename)
            cprint(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}", 'cyan', attrs=['bold'])

            # üëá –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∞—Ç–æ–º–∞—Ä–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            try:
                with transaction.atomic():
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    match = FILENAME_PATTERN.match(filename)
                    if not match:
                        raise ValueError("–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É!")

                    number = match.group('number')
                    date_str = match.group('date')
                    try:
                        date = datetime.strptime(date_str, "%d-%m-%Y").date()
                    except ValueError:
                        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")

                    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º Invoice
                    invoice, _ = Invoice.objects.get_or_create(
                        number=number,
                        defaults={'date': date}
                    )

                    # –°–æ–∑–¥–∞–µ–º ExcelFile –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ
                    excel_file = ExcelFile(invoice=invoice, processed=False)
                    with open(filepath, 'rb') as f:
                        excel_file.file.save(filename, File(f), save=True)

                    wb = load_workbook(excel_file.file.path, data_only=True)
                    ws = wb.active

                    # üëá –°–ø–∏—Å–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ Product
                    products_to_create = []

                    for row_index, row in enumerate(ws.iter_rows(min_row=1, values_only=True), start=1):
                        if not any(row[:4]):
                            continue

                        if validate_header_row(row):
                            cprint(f" ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ (—Å—Ç—Ä–æ–∫–∞ {row_index})", 'yellow')
                            continue

                        name = str(row[0]).strip() if row[0] else None
                        if not name:
                            raise ValueError(f"–ü—É—Å—Ç–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Å—Ç—Ä–æ–∫–∞ {row_index})")

                        # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∑–∞–¥–∞—á–µ–π
                        quantity = strict_float_conversion(row[2], row_index, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                        price = strict_float_conversion(row[3], row_index, "–¶–µ–Ω–∞")

                        # üëá –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–∞–º—è—Ç–∏, –Ω–æ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        products_to_create.append(
                            Product(
                                invoice=invoice,
                                excel_file=excel_file,
                                name=name,
                                quantity=quantity,
                                price=price
                            )
                        )

                    if not products_to_create:
                        raise ValueError("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.")

                    # üëá –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ—Å–ª–µ —Ü–∏–∫–ª–∞
                    Product.objects.bulk_create(products_to_create)

                    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –æ—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                    excel_file.processed = True
                    excel_file.save()

                    cprint(f"‚úî –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(products_to_create)}", 'green')

            except Exception as e:
                # üëá –ë–ª–æ–∫ except —Å—Ç–∞–ª –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–æ—â–µ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–∞–º–∞ –≤—Å–µ –æ—Ç–∫–∞—Ç–∏—Ç.
                cprint(f"\nüî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", 'red')
                cprint("‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.", 'red')