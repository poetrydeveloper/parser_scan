import os
import re
from datetime import datetime
from django.core.management.base import BaseCommand
from openpyxl import load_workbook
from django.core.files import File
from termcolor import cprint

from parser.models import ExcelFile, Product, Invoice

INPUT_DIR = 'parser/input'
FILENAME_PATTERN = re.compile(
    r'^(?P<number>\d+?)_(?P<date>\d{2}-\d{2}-\d{4})_(?P<page>\d+)\.xlsx$'
)

def safe_float(value):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float —Å –∑–∞–º–µ–Ω–æ–π –∑–∞–ø—è—Ç—ã—Ö"""
    if isinstance(value, str):
        value = value.replace(',', '.').strip()
    try:
        return float(value) if value else 0.0
    except ValueError:
        return 0.0

class Command(BaseCommand):
    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç Excel-—Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ input (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏)"

    def handle(self, *args, **kwargs):
        if not os.path.exists(INPUT_DIR):
            os.makedirs(INPUT_DIR, exist_ok=True)
            cprint(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {INPUT_DIR}", 'yellow')

        files = [f for f in os.listdir(INPUT_DIR) if f.endswith('.xlsx')]
        if not files:
            cprint("–ù–µ—Ç .xlsx —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ input", 'yellow')
            return

        for filename in files:
            filepath = os.path.join(INPUT_DIR, filename)
            cprint(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}", 'cyan', attrs=['bold'])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            match = FILENAME_PATTERN.match(filename)
            if not match:
                cprint(" ‚õî –ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...", 'red')
                continue

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏ –¥–∞—Ç—ã
            number = match.group('number')
            date_str = match.group('date')
            try:
                date = datetime.strptime(date_str, "%d-%m-%Y").date()
            except Exception as e:
                cprint(f" ‚õî –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {e}", 'red')
                continue

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ñ–∞–π–ª–µ
            with open(filepath, 'rb') as f:
                excel_file = ExcelFile.objects.create(file=File(f, name=filename))

            invoice, _ = Invoice.objects.get_or_create(number=number, defaults={'date': date})
            excel_file.invoice = invoice
            excel_file.save()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel
            try:
                wb = load_workbook(excel_file.file.path, data_only=True)
                ws = wb.active

                success_count = 0
                error_count = 0

                for row_index, row in enumerate(ws.iter_rows(min_row=2, values_only=True), start=2):
                    if not any(row[:4]):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        continue

                    try:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏
                        name = str(row[0]).strip() if row[0] else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                        quantity = safe_float(row[2])
                        price = safe_float(row[3])

                        Product.objects.create(
                            invoice=invoice,
                            excel_file=excel_file,
                            name=name,
                            quantity=quantity,
                            price=price
                        )
                        cprint(f" ‚úÖ –°—Ç—Ä–æ–∫–∞ {row_index}: {name[:50]}...", 'green')
                        success_count += 1

                    except Exception as e:
                        cprint(f" ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_index}: {e}", 'red')
                        cprint(f"    üëâ –î–∞–Ω–Ω—ã–µ: {row[:4]}", 'yellow')
                        error_count += 1

                excel_file.processed = True
                excel_file.save()
                cprint(f"‚úî –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}", 'blue')

            except Exception as e:
                cprint(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}", 'red')
                excel_file.delete()  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å