# parser/management/commands/load_prices.py
import os
import re
from django.core.management.base import BaseCommand
import xlrd
from openpyxl import load_workbook
from django.db import transaction, models
from termcolor import cprint
from datetime import datetime
from parser.models import Price

INPUT_DIR = 'parser/input/input_prices'
FILENAME_PATTERN = re.compile(r'.*\.(xls|xlsx)$')

class Command(BaseCommand):
    help = "–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ input_prices"

    @staticmethod
    def clean_stock_value(value):
        """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞"""
        if value is None:
            return ""
        if isinstance(value, (int, float)):
            return str(int(value)) if value == int(value) else str(value)
        return str(value).strip()

    @staticmethod
    def safe_float_convert(value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        if value is None:
            return 0.0
        try:
            return float(str(value).replace(',', '.').strip())
        except (ValueError, TypeError):
            return 0.0

    @staticmethod
    def safe_int_convert(value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int"""
        if value is None:
            return 0
        try:
            return int(float(str(value).replace(',', '.').strip()))
        except (ValueError, TypeError):
            return 0

    @staticmethod
    def format_datetime(dt):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        return dt.strftime("%d.%m.%Y %H:%M:%S") if dt else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    def handle(self, *args, **options):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(INPUT_DIR):
            os.makedirs(INPUT_DIR, exist_ok=True)
            cprint(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {INPUT_DIR}", 'yellow')
            return

        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        files = [
            f for f in os.listdir(INPUT_DIR)
            if f.lower().endswith(('.xls', '.xlsx'))
            and not f.startswith('~$')
        ]

        if not files:
            cprint("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø—Ä–∞–π—Å–æ–≤ –≤ –ø–∞–ø–∫–µ input_prices", 'yellow')
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        for filename in sorted(files):
            filepath = os.path.join(INPUT_DIR, filename)
            cprint(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}", 'cyan', attrs=['bold'])

            try:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –∏ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                if filename.lower().endswith('.xlsx'):
                    try:
                        wb = load_workbook(filepath, data_only=True)
                        sheet = wb.active
                        rows = list(sheet.iter_rows(values_only=True, min_row=2))
                    except Exception as e:
                        cprint(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLSX: {e}", 'red')
                        continue
                else:  # .xls
                    try:
                        wb = xlrd.open_workbook(filepath)
                        sheet = wb.sheet_by_index(0)
                        rows = [sheet.row_values(row_idx) for row_idx in range(1, sheet.nrows)]
                    except Exception as e:
                        cprint(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLS: {e}", 'red')
                        continue

                stats = {'new': 0, 'exists': 0, 'errors': []}

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫
                for row_idx, row in enumerate(rows, start=2):
                    if not any(row):
                        continue

                    try:
                        with transaction.atomic():
                            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ code
                            code = str(row[0]).strip() if row[0] else None
                            if not code:
                                stats['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥")
                                continue

                            # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ article
                            article = str(row[2]).strip() if len(row) > 2 and row[2] else None

                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                            price_data = {
                                'type': str(row[1]).strip() if len(row) > 1 and row[1] else '',
                                'name': str(row[3]).strip() if len(row) > 3 and row[3] else '',
                                'price1': self.safe_float_convert(row[4]) if len(row) > 4 else 0,
                                'price2': self.safe_float_convert(row[5]) if len(row) > 5 else 0,
                                'stock': self.clean_stock_value(row[6]) if len(row) > 6 else "",
                                'quantity': self.safe_int_convert(row[7]) if len(row) > 7 else 0,
                                'price_clear': self.safe_float_convert(row[8]) if len(row) > 8 else 0
                            }

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
                            if Price.objects.filter(code=code).exists():
                                stats['exists'] += 1
                                cprint(f"‚è© –ü—Ä–æ–ø—É—Å–∫: –∫–æ–¥ {code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 'blue')
                                continue

                            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                            Price.objects.create(
                                code=code,
                                article=article,
                                **price_data
                            )
                            stats['new'] += 1
                            cprint(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {code} (–∞—Ä—Ç–∏–∫—É–ª: {article or '–Ω–µ—Ç'})", 'green')

                    except Exception as e:
                        stats['errors'].append(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: {str(e)}")
                        cprint(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_idx}: {e}", 'red')

                # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ñ–∞–π–ª—É
                cprint(
                    f"\n–ò—Ç–æ–≥–∏ –ø–æ —Ñ–∞–π–ª—É {filename}:\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {stats['new']}\n"
                    f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {stats['exists']}\n"
                    f"–û—à–∏–±–æ–∫: {len(stats['errors'])}",
                    'cyan'
                )

                if stats['errors']:
                    cprint("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:", 'yellow')
                    for err in stats['errors'][:5]:
                        cprint(f"‚Ä¢ {err}", 'red')

            except Exception as e:
                cprint(f"\nüî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞ {filename}: {e}", 'red')

        cprint("\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 'green', attrs=['bold'])